<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprDunmot</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>400</depth>
  <persistent>0</persistent>
  <parentName>objEnemy</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
size = 2;
moveSpeedPerSecond = 60;

image_speed = 0.25;
image_xscale = size;
image_yscale = size;

maxHealth = 25;
currentHealth = maxHealth;

aggroTarget = objPlayer;

//behavior

waitTime = 0;
hidingAggroRange = 200;
alertAggroRange = 400;

enum dunmotStates {
    idle, 
    aggro,
    hiding
}

state = dunmotStates.hiding;
nextState = state;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//oldDistanceFromPlayer = point_distance(x, y, aggroTarget.x, aggroTarget.y);

aggroX = objDunmotAggro.x;
aggroY = objDunmotAggro.y;

event_inherited();

var directionToPlayer = point_direction(x, y, objPlayer.x, objPlayer.y);

switch (state) {
    case dunmotStates.aggro:
        sprite_index = sprDunmot;
        invincible = false;
        
        //run after player
        addForce(id, moveSpeedThisFrame, point_direction(x, y, aggroX, aggroY));
        
        //stop after losing sight of player
        if (distance_to_object(objPlayer) &gt; alertAggroRange) {
            waitTime = 90;
            state = dunmotStates.idle;
            nextState = dunmotStates.hiding;
        }
        
        //attack player
        if (place_meeting(x, y, objPlayer)) dealDamage(objPlayer, 25, 20, directionToPlayer, true);
        
        break;

    case dunmotStates.hiding:
        sprite_index = sprDunmotHiding;
        invincible = true;
        //aggro all dunmots when player gets close
        if (distance_to_object(objPlayer) &lt; hidingAggroRange and !collision_line(x, y, objPlayer.x, objPlayer.y, objWall, false, true)) objDunmot.state = dunmotStates.aggro;
        break;

    case dunmotStates.idle:
        sprite_index = sprDunmot;
        invincible = false;
        //aggro all dunmots when player gets close
        if (distance_to_object(objPlayer) &lt; alertAggroRange and nextState = dunmotStates.hiding and !collision_line(x, y, objPlayer.x, objPlayer.y, objWall, false, true)) objDunmot.state = dunmotStates.aggro;
        
        waitTime--;
        if (waitTime &lt;= 0) state = nextState;
        break;
}

iFrames--;
if (currentHealth &lt;= 0) {
    instance_destroy();
    with (instance_create(x, y, objDunmotDead)) {
        vx = other.vx;
        vy = other.vy;
        size = other.size;
        iFrames = other.iFrames;
    }
    instance_create(x, y, objHealthPickup);
    generateMod(x, y, 0, 100);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>switch state {
    case dunmotStates.aggro:
        var facingLeft = sign(x - objPlayer.x);
        if (facingLeft = 0) facingLeft = 1;
        image_xscale = facingLeft * size;
    
        break;
    case dunmotStates.idle:
        if (waitTime &lt; 60 and waitTime &gt; 30 and nextState = dunmotStates.hiding) {
            image_xscale = size * -1;
        } else {
            image_xscale = size;
        }
        break;
}

event_inherited();

draw_text(32, 64, "State: " + string(state));
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
