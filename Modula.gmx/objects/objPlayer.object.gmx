<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprTan</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>300</depth>
  <persistent>-1</persistent>
  <parentName>objEntity</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

//movement variables
moveSpeedPerSecond = 600;   //base movement speed in pixels per second
frict = 0.8;                //friction
ax = 0;                     //accelerationX
ay = 0;                     //accelerationY
vx = 0;                     //velocityX
vy = 0;                     //velocityY

damageCoefficient = 1;

iFramesMax = 15;
cooldownAfterAttack = 5;
cooldownAfterAttackSpartan = 8;
cooldownAfterAttackSherrif = 5;
cooldownAfterAttackGreaser = 5;
cooldownAfterAttackCyborg = 5;

attackCooldown = 0;
shieldCooldown = 0;
iFrames = 0;

instance_create(x, y, objDunmotAggro);

enum states {
    normal,
    attacking,
    spartanLunging
}
state = states.normal;

switch (global.character) {
    case playerCharacters.spartan:
        sprite_index = sprTan;
        maxHealth = 120;
        cooldownAfterAttack = cooldownAfterAttackSpartan;
        instance_create(x, y, objShield);
        break;
        
    case playerCharacters.sherrif:
        sprite_index = sprSherrif;
        maxHealth = 100;
        cooldownAfterAttack = cooldownAfterAttackSherrif;
        break;
        
    case playerCharacters.greaser:
        sprite_index = sprGreaser;
        maxHealth = 80;
        cooldownAfterAttack = cooldownAfterAttackGreaser;
        global.luck = 1;
        moveSpeedPerSecond = 650;
        break;
    case playerCharacters.cyborg:
        sprite_index = sprCyborg;
        maxHealth = 100;
        cooldownAfterAttack = cooldownAfterAttackCyborg;
        moveSpeedPerSecond = 550;
        break;
}

currentHealth = maxHealth;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// @description

event_inherited();

var leftClick = mouse_check_button_pressed(mb_left);
var rightClick = mouse_check_button_pressed(mb_right);
var lookDirection = point_direction(x, y, mouse_x, mouse_y);
/*
if (rightClick) {
    if (heldWeapon = objSpear) heldWeapon = objSword;
    else heldweapon = objSpear;
}
*/

//movement inputs
var walkUp = keyboard_check(vk_up) or keyboard_check(ord("W"));
var walkRight = keyboard_check(vk_right) or keyboard_check(ord("D"));
var walkDown = keyboard_check(vk_down) or keyboard_check(ord("S"));
var walkLeft = keyboard_check(vk_left) or keyboard_check(ord("A"));

switch (state) {
    case states.normal:
    
        //walk acceleration
        ax = (walkRight - walkLeft) * sqrt(moveSpeedThisFrame);
        ay = (walkDown - walkUp) * sqrt(moveSpeedThisFrame);
        if (point_distance(0, 0, ax, ay) &gt; sqrt(moveSpeedThisFrame)) {
            ax *= (sqrt(2) / 2);
            ay *= (sqrt(2) / 2);
        }
        
        if (rightClick) {
            switch (global.character) {
                case playerCharacters.spartan:
                    //lunge
                    if (attackCooldown &lt;= 0) {
                        shieldCooldown = 30;
                        addForce(id, 40, lookDirection);
                        stab(lookDirection);
                        state = states.spartanLunging;
                    }
                    break;
                case playerCharacters.sherrif:
                
                    break;
                case playerCharacters.greaser:
                
                    break;
            }
        }
        //attack
        if (leftClick and attackCooldown &lt;= 0) {
            state = states.attacking;
            switch (global.character) {
            case playerCharacters.spartan:
                stab(lookDirection);
                shieldCooldown = attackCooldown + 10;
                break;
            case playerCharacters.sherrif:
                shoot(lookDirection);
                break;
            case playerCharacters.greaser:
                slash(lookDirection);
                break;
            }
        }
        break;
    case states.attacking:
        attackCooldown--;
        if (attackCooldown &lt;= 0) {
            state = states.normal;
        }
        break;
    case states.spartanLunging:
        attackCooldown--;
        if (attackCooldown &lt;= 0) {
            state = states.normal;
        }
        break;
}

iFrames--;

shieldCooldown--;
if (shieldCooldown &lt;= 0) instance_activate_object(objShield);
else instance_deactivate_object(objShield);

if (currentHealth &lt;= 0) game_restart();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

//attack cooldown
if (attackCooldown &gt; 0) {
    draw_set_colour(c_gray);
    draw_rectangle(x - (attackCooldown / 2), y + 30, x + (attackCooldown / 2), y + 35, false);
    draw_set_color(c_black);
}
//health
draw_set_color(c_red);
draw_rectangle(x - (currentHealth / maxHealth * 100 / 4), y + 20, x + (currentHealth / maxHealth * 100 / 4), y + 25, false);

//debug
draw_text(128, 32, damageCoefficient);
draw_text(128, 64, objPlayer.cooldownAfterAttack);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
