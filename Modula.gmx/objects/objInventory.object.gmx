<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>50</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Display the hotbar? Will be used later in draw event
globalvar showInv;
globalvar mouseItem;
globalvar maxItems;
globalvar mouseCount;
globalvar mouseItemType;
globalvar maxCount;
globalvar drawScale;
showInv = true;
mouseItem = -1; //There is by default no item being held by the mouse
maxItems = 40; //Total number of inventory slots including hotbar but not equipment slots (armor, trinkets etc)
mouseCount = 0;
mouseItemType = -1;
maxCount = 0;
drawScale = 1.5;
instance_create(x,y,objMouseItem);

//Create the buttons for the hotbar
for (i = 0; i &lt; maxItems; i ++) {
    global.inventory[i] = -1; //inventory is an array that tracks what item is in what slot at any time. -1 means no item. The number here represents the item's id and is represented by the correlating image in "sprItems"
    global.count[i] = 0;
    button[i] = instance_create(0,0,objInvButton);
    button[i].slot = i; //Allows an individual button to be easily called upon later.
};

//Starting inventory
global.inventory[0] = 0;
global.inventory[1] = 1;
global.inventory[2] = 2;
global.count[0] = 12;
global.count[1] = 3;
global.count[2] = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Press enter to open backpack
if (keyboard_check_released(vk_enter)) {
    if (showBackpack) showBackpack = false;
    else showBackpack = true;
};
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (showInv) {
    //Drawing variables
    var x1,x2,y1,y2;
    x1 = view_xview[0];
    x2 = x1 + view_wview[0];
    y1 = view_yview[0];
    y2 = y1 + 32; //The constant represents how far the display will be drawn from the top of the screen
    
    //Black screen
    draw_set_color(c_black);
    draw_set_alpha(0.6);
    draw_rectangle(x1,y1,x2,(y2 + room_height),0)
    draw_set_alpha(1);
    //draw other boxes
    for (i = 0; i &lt; 4; i++) { //4 rows
        for (j = (i*10); j &lt; 10 + (i*10); j++) { //draw each box within each row
            jx = x1 + 48 + ((j - (i*10)) * (40 * drawScale));
            jy = y2 + (i*drawScale*32) + (i*(20 * drawScale));
            draw_sprite_ext(sprBorder,0,jx,jy,drawScale,drawScale,0,c_white,1);
            button[j].x = jx;
            button[j].y = jy;
        };
    };
};
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="77">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//This is for testing purposes. It adds a randon item to your inventory
var item = irandom_range(0,2);
var count = irandom_range(1,4);
scrItemAdd(item,count);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
