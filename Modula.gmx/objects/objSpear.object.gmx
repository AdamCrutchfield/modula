<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprSpear</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-100</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>stabSpeed = 20;
stabDistance = 100;

currentDistance = 0;

damage = 10;
push = 10;

//sets sprite size
size = 3.0;
image_yscale = size;
image_xscale = size;


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>currentDistance += stabSpeed;

//direction = point_direction(objPlayer.x, objPlayer.y, mouse_x, mouse_y);
image_angle = direction;

x = objPlayer.x + lengthdir_x(currentDistance, direction);
y = objPlayer.y + lengthdir_y(currentDistance, direction);

//reverse stab
if (currentDistance &gt;= stabDistance) stabSpeed *= -1;
//end stab
if (currentDistance &lt;= 0) instance_destroy();

if (objPlayer.state = states.spartanLunging) {
    damage = 20;
    push = 40;
} else {
    damage = 10;
    push = 10;
}

//stab, collide with enemies, damage enemies
hasHitThisFrame = false;
for (i = 1; i &lt;= stabSpeed; i++) {
    
    //stab forward within frame
    
    
    //hit and damage all touching enemies
    if (place_meeting(x, y, objEnemy) and !hasHitThisFrame) {
        //declare stuff
        hitEnemies[0] = noone;
        var count = 0;
        var inst = instance_place(x, y, objEnemy);
        //add all touching enemies to an array. since instance_place() 
        //always returns the object with lowest id, deactivating them is necessary
        while (inst != noone) {
            hitEnemies[count] = inst;
            count++;
            instance_deactivate_object(inst);
            inst = instance_place(x, y, objEnemy);
        }
        //reactivate and damage all enemies that were hit
        for(var i = 0; i &lt; count; i++) {
            instance_activate_object(hitEnemies[i]);
            dealDamage(hitEnemies[i], damage * objPlayer.damageCoefficient, push, direction, true);
        }
        hasHitThisFrame = true;
    }
}



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_text(32, 96, currentDistance);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
