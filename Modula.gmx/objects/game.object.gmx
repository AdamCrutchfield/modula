<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-10000</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.secondsPassed = delta_time / 1000000;
global.luck = 0;
randomize();

enum playerCharacters {
    spartan,
    sherrif,
    greaser, 
    cyborg
}

//mods enumeration
enum modEvents {
    leftClick,
    rightClick,
    attack,
    takeDamage,
    damage,
    constant,
    pickup,
    drop
}

//----------------------------INVENTORY-----------------------//
showInv = false;
mouseItem = modNone; //There is by default no item being held by the mouse
drawScale = 1.5;
instance_create(x,y,objMouseItem);

distanceBetweenSlots = 48 + 0;

invHiddenYOffset = 1000;
modHiddenXOffset = 1000;

//Create the buttons for the inventory
var slotNum = 0;
for (i = 0; i &lt; INV_ROWS; i++) {
    for (j = 0; j &lt; INV_COLUMNS; j++) {
        inventory[slotNum] = modNone; //inventory is an array that tracks what item is in what slot at any time. -1 means no item. The number here represents the item's id and is represented by the correlating image in "sprItems"
        button[slotNum] = instance_create(j * distanceBetweenSlots + 64, i * distanceBetweenSlots + 64 - invHiddenYOffset, objInvButton);
        button[slotNum].slot = slotNum; //Allows an individual button to be easily called upon later.
        slotNum++;
    }
}

//create the buttons for the equipped slots
for (i = 0; i &lt; 10; i++) {
    equipped[i] = modNone; //inventory is an array that tracks what item is in what slot at any time. -1 means no item. The number here represents the item's id and is represented by the correlating image in "sprItems"
    equippedButton[i] = instance_create(view_wview[0] - 64, i * distanceBetweenSlots + 64, objEquipButton);
    equippedButton[i].slot = i; //Allows an individual button to be easily called upon later.
}

//Starting inventory
inventory[0] = modLuck;
inventory[1] = modCelerity;
inventory[2] = modEtherealness;
inventory[3] = modRash;
inventory[4] = modLuck;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.secondsPassed = delta_time / 1000000;

//debug
if (keyboard_check_pressed(vk_delete)) game_restart();

if (keyboard_check_pressed(vk_space)) instance_create(mouse_x, mouse_y, objFly);
if (keyboard_check_pressed(ord("M"))) {
    with instance_create(mouse_x, mouse_y, objMod){
        modType = modLuck;
    }
}
if (keyboard_check_pressed(ord("N"))) {
    with instance_create(mouse_x, mouse_y, objMod){
        modType = modCelerity;
    }
}
//add a random item to inventory
if (keyboard_check_released(vk_shift)) {
    var item = choose(modLuck, modCelerity, modEtherealness, modRash);
    scrItemAdd(item);
}

//drop last mod
/*if (keyboard_check_pressed(ord("P"))) {
    if (ds_list_size(global.equippedMods) &gt; 0) {
        var i = ds_list_size(global.equippedMods) - 1;
        while (global.equippedMods[| i] == modNone) {
            if (i == 0) break;
            i--;
        }
        dropMod(i);
    }
}*/
switch (room) {
    case rmTitle:
        //choose character
        if (keyboard_check_pressed(ord("1"))) {
            room_goto_next();
            global.character = playerCharacters.spartan;
        }
        if (keyboard_check_pressed(ord("2"))) {
            room_goto_next();
            global.character = playerCharacters.sherrif;
        }
        if (keyboard_check_pressed(ord("3"))) {
            room_goto_next();
            global.character = playerCharacters.greaser;
        }
        if (keyboard_check_pressed(ord("1"))) {
            room_goto_next();
            global.character = playerCharacters.spartan;
        }
        break;
    default:
        //Press enter to open inventory
        if (keyboard_check_released(vk_enter)) showInv = !showInv; //toggles inventory
        if (showInv) {
            //instance_deactivate_all(true);
            instance_activate_object(objMouseItem);
            
            //instance_activate_object(objInvButton);
            //instance_activate_object(objEquipButton);
        } else {
            //instance_activate_all();
            instance_deactivate_object(objMouseItem);
            
            //instance_deactivate_object(objInvButton);
            //instance_activate_object(objEquipButton);
        }
        break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (room = rmInit) room_goto_next();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*for (i = 0; i &lt; ds_list_size(global.equippedMods); i ++) {
    draw_text(view_wview[0] - 64, i * 32, global.equippedMods[| i]);
    draw_sprite_ext(sprBorderEquipped, 0, view_wview[0] - 64, i * 32, drawScale, drawScale, 0, c_white, 1);
}*/

if (game.showInv) {
    //Drawing variables
    var x1,x2,y1,y2;
    x1 = view_xview[0];
    x2 = x1 + view_wview[0];
    y1 = view_yview[0];
    y2 = y1 + 32; //The constant represents how far the display will be drawn from the top of the screen
    
    //Black screen
    /*
    draw_set_color(c_black);
    draw_set_alpha(0.6);
    draw_rectangle(x1,y1,x2,(y2 + room_height),0)
    draw_set_alpha(1);
    //draw other boxes
    /*
    for (i = 0; i &lt; 4; i++) { //4 rows
        for (j = (i*10); j &lt; 10 + (i*10); j++) { //draw each box within each row
            jx = x1 + 48 + ((j - (i*10)) * (40 * drawScale));
            jy = y2 + (i * drawScale * 32) + (i * drawScale * 20);
            draw_sprite_ext(sprBorder, 0, jx, jy, drawScale, drawScale, 0, c_white, 1);
            button[j].x = jx;
            button[j].y = jy;
        };
    };
    */
};
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
