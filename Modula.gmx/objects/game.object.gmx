<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-10000</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.secondsPassed = delta_time / 1000000;
global.luck = 0;
randomize();

enum playerCharacters {
    spartan,
    sherrif,
    greaser, 
    cyborg
}

characterSprites[playerCharacters.spartan] = sprTan;
characterSprites[playerCharacters.sherrif] = sprSherrif;
characterSprites[playerCharacters.greaser] = sprGreaser;
characterSprites[playerCharacters.cyborg] = sprCyborg;

characterMaxHealth[playerCharacters.spartan] = 120;
characterMaxHealth[playerCharacters.sherrif] = 100;
characterMaxHealth[playerCharacters.greaser] = 80;
characterMaxHealth[playerCharacters.cyborg] = 100;

characterBaseCooldownAfterAttack[playerCharacters.spartan] = 8;
characterBaseCooldownAfterAttack[playerCharacters.sherrif] = 5;
characterBaseCooldownAfterAttack[playerCharacters.greaser] = 5;
characterBaseCooldownAfterAttack[playerCharacters.cyborg] = 5;

characterMoveSpeedPerSecond[playerCharacters.spartan] = 600;
characterMoveSpeedPerSecond[playerCharacters.sherrif] = 600;
characterMoveSpeedPerSecond[playerCharacters.greaser] = 650;
characterMoveSpeedPerSecond[playerCharacters.cyborg] = 550;

characterBaseDamage[playerCharacters.spartan] = 10;
characterBaseDamage[playerCharacters.sherrif] = 10;
characterBaseDamage[playerCharacters.greaser] = 10;
characterBaseDamage[playerCharacters.cyborg] = 10;

//mods enumeration
enum modEvents {
    leftClick,
    rightClick,
    attack,
    takeDamage,
    damage,
    constant,
    pickup,
    drop
}

//----------------------------INVENTORY-----------------------//
showInv = false;

mouse[0] = modNone; //There is by default no item being held by the mouse
mouse[1] = 1;

drawScale = 1.5;
instance_create(x,y,objMouseItem);

distanceBetweenSlots = 48 + 0;

//create all buttons
inventory[0, 0] = modNone;
inventory[0, 1] = 1;

var currentInvGroup = "";
var currentInvControlObject = noone;

for (slotNum = 0; slotNum &lt; 90; slotNum++) {
    //set values for inventory slots
    inventory[slotNum, 0] = modNone;
    inventory[slotNum, 1] = 1;
    
    //change current inventory group
    if (slotNum == 0) {
        currentInvGroup = "main";
        invControlMain = instance_create(0, 0, objInvControl);
        currentInvControlObject = invControlMain;
        with invControlMain {
            shownX = 64;
            shownY = 64;
            hiddenX = shownX;
            hiddenY = shownY - 1000;
            x = hiddenX;
            y = hiddenY;
        }
        
    } else if (slotNum == 40) {
        currentInvGroup = "equipped";
        invControlEquipped = instance_create(0, 0, objInvControl);
        currentInvControlObject = invControlEquipped;
        with invControlEquipped {
            shownX = view_xview[0] + view_wview[0] - 4*64;
            shownY = 64;
            hiddenX = shownX + 1000;
            hiddenY = shownY;
            x = hiddenX;
            y = hiddenY;
        }
        
    } else if (slotNum = 50) {
        currentInvGroup = "shop";
        invControlShop = instance_create(0, 0, objInvControl);
        currentInvControlObject = invControlShop;
        with invControlShop {
            shownX = 64;
            shownY = view_yview[0] + view_hview[0] - 2*(64 + (48 * 4));
            hiddenX = shownX;
            hiddenY = shownY + 1000;
            x = hiddenX;
            y = hiddenY;
        }
    }
    
    //make slots
    switch currentInvGroup{
        case "main":
            with instance_create(0, 0, objInventorySlot) {
                slot = other.slotNum;
                strength = 1;
                objectToFollow = other.invControlMain;
                
                xOffset = (other.slotNum mod 10) * 48;
                yOffset = (other.slotNum div 10) * 48;
            }
            break;
        case "equipped":
            with instance_create(0, 0, objInventorySlot) {
                slot = other.slotNum;
                strength = 1;
                objectToFollow = other.invControlEquipped;
                
                xOffset = 0;
                yOffset = (other.slotNum - 40) * 48;
            }
            break;
        case "shop":
            with instance_create(0, 0, objInventorySlot) {
                slot = other.slotNum;
                strength = 1;
                objectToFollow = other.invControlShop;
                
                xOffset = ((other.slotNum - 50) mod 10) * 48;
                yOffset = ((other.slotNum - 50) div 10) * 48;
            }
            break;
    }
}

/*
main inventory is slots 0-39
equipped inventory is slots 40-49
shop inventory is slots 50-89
*/

//Starting inventory
inventory[0, 0] = modLuck;
inventory[1, 0] = modCelerity;
inventory[2, 0] = modEtherealness;
inventory[3, 0] = modRash;

inventory[4, 0] = modLuck;
inventory[4, 1] = 4;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.secondsPassed = delta_time / 1000000;

//debug
if (keyboard_check_pressed(vk_delete)) game_restart();

if (keyboard_check_pressed(vk_space)) instance_create(mouse_x, mouse_y, objDunmot);
if (keyboard_check_pressed(ord("M"))) {
    with instance_create(mouse_x, mouse_y, objMod){
        modType = modLuck;
        strength = 1;
    }
}
if (keyboard_check_pressed(ord("N"))) {
    with instance_create(mouse_x, mouse_y, objMod){
        modType = modCelerity;
        strength = 1;
    }
}

if (keyboard_check_pressed(ord("B"))) {
    room_goto_next();
}
if (keyboard_check_pressed(vk_f11)) window_set_fullscreen(!window_get_fullscreen());

//add a random item to inventory
if (keyboard_check_released(vk_shift)) {
    var item = choose(modLuck, modCelerity, modEtherealness, modRash);
    scrItemAdd(item, 1);
}

switch (room) {
    case rmTitle:
        //choose character
        /*
        if (keyboard_check_pressed(ord("1"))) {
            room_goto_next();
            global.character = playerCharacters.spartan;
        }
        if (keyboard_check_pressed(ord("2"))) {
            room_goto_next();
            global.character = playerCharacters.sherrif;
        }
        if (keyboard_check_pressed(ord("3"))) {
            room_goto_next();
            global.character = playerCharacters.greaser;
        }
        if (keyboard_check_pressed(ord("1"))) {
            room_goto_next();
            global.character = playerCharacters.spartan;
        }
        */
        break;
    default:
        //Press enter to open inventory
        if (keyboard_check_released(vk_enter)) showInv = !showInv; //toggles inventory
        break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (room = rmInit) room_goto_next();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*for (i = 0; i &lt; ds_list_size(global.equippedMods); i ++) {
    draw_text(view_wview[0] - 64, i * 32, global.equippedMods[| i]);
    draw_sprite_ext(sprBorderEquipped, 0, view_wview[0] - 64, i * 32, drawScale, drawScale, 0, c_white, 1);
}*/

if (game.showInv) {
    //Drawing variables
    var x1,x2,y1,y2;
    x1 = view_xview[0];
    x2 = x1 + view_wview[0];
    y1 = view_yview[0];
    y2 = y1 + 32; //The constant represents how far the display will be drawn from the top of the screen
    
    //Black screen
    /*
    draw_set_color(c_black);
    draw_set_alpha(0.6);
    draw_rectangle(x1,y1,x2,(y2 + room_height),0)
    draw_set_alpha(1);
    //draw other boxes
    /*
    for (i = 0; i &lt; 4; i++) { //4 rows
        for (j = (i*10); j &lt; 10 + (i*10); j++) { //draw each box within each row
            jx = x1 + 48 + ((j - (i*10)) * (40 * drawScale));
            jy = y2 + (i * drawScale * 32) + (i * drawScale * 20);
            draw_sprite_ext(sprBorder, 0, jx, jy, drawScale, drawScale, 0, c_white, 1);
            button[j].x = jx;
            button[j].y = jy;
        };
    };
    */
};

//draw_text(32, 32, invControlMain.x)
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
